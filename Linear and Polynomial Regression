# Practicing Linear Regression

import numpy as np
import matplotlib.pylab as plt


# Randomized Data
from scipy.io.matlab import mio4

X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)
t = np.linspace(0, 2, 3)


# plt.plot(X, y, 'g.')
# plt.show()

# Prepare Data
X_b = np.c_[np.ones((100, 1)), X]


# Apply analytical form
best_theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)
b1 = best_theta[0][0]
m1 = best_theta[1][0]
print(m1, b1)

# plt.plot(t, m1 * t + b1, 'r-')
# plt.show()



# We can also do this with Scikit library
from sklearn.linear_model import LinearRegression

lin_reg = LinearRegression()
reg = lin_reg.fit(X_b, y)  # Runtime warning, insignificant and will fix in LAPACK 3.4.0
b2 = reg.intercept_[0]
m2 = reg.coef_[0][1]
print(m2, b2)

# plt.plot(t, m2 * t + b2, 'r-')
# plt.show()


# Matrix multiplication and dimensionality affect computational power and time, so we will implement Gradient Descent

# Batch Gradient Descent
# BGD is slow for large data sets, hbut fast for large feature spaces
eta = 0.1  # Learning Rate
n_iterations = 1000  # number of runs
m = 100  # features

theta = np.random.randn(2, 1)

for iteration in range(n_iterations):
    gradients = 2/m * X_b.T.dot(X_b.dot(theta) - y)
    theta = theta - eta * gradients

b3 = theta[0][0]
m3 = theta[1][0]

print(m3, b3)
# plt.plot(t, m3 * t + b3)
# plt.show()


# Or we can use Stochastic Gradient Descent
# SGD is much better for large datasets
n_epochs = 100
t0, t1 = 5, 50


def learning_schedule(t):
    return t0 / (t + t1)


theta = np.random.rand(2, 1)

for epoch in range(n_epochs):
    for i in range(m):
        random_index = np.random.randint(m)
        xi = X_b[random_index:random_index + 1]
        yi = y[random_index:random_index + 1]
        gradients = 2 * xi.T.dot(xi.dot(theta) - yi)
        eta = learning_schedule(epoch * m + i)
        theta = theta - eta * gradients

b4 = theta[0][0]
m4 = theta[1][0]

print(m4, b4)
# plt.plot(t, m4 * t + b4)
# plt.show()

# Or we can steal frm scikit
from sklearn.linear_model import SGDRegressor
sgd_reg = SGDRegressor(n_iter=n_epochs, penalty=None, eta0=0.1)
sgd_reg.fit(X, y.ravel())
b5 = sgd_reg.intercept_[0]
m5 = sgd_reg.coef_[0]

print(m5, b5)
# plt.plot(t, m5 * t + b5)
# plt.show()


# We can also do Mini-Batch Gradient Descent, but theres no point here


# Polynomial Regression

# Fake dataset
m = 100
X = 6 * np.random.randn(m, 1) - 3
y = 0.5 * X**2 + X + 2 + np.random.randn(m, 1)

# plt.plot(X, y, 'b.')
# plt.show()

# Polynomial fit
from sklearn.preprocessing import PolynomialFeatures
poly_features = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly_features.fit_transform(X)
t = np.arange(-20, 20, 0.1)

lin_reg = LinearRegression()
lin_reg.fit(X_poly, y)
print(lin_reg.coef_, lin_reg.intercept_)
a = lin_reg.coef_[0][1]
b = lin_reg.coef_[0][0]
c = lin_reg.intercept_[0]

print(a, b, c)
# plt.plot(t, a * t**2 + b * t + c, 'r-')
# plt.show()


# Evaluating learning curves: Over and under fitting
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

def plot_learning_curves(model, X, y):
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)
    train_errors, val_errors = [], []
    for m in range(1, len(X_train)):
        model.fit(X_train[:m], y_train[:m])
        y_train_predict = model.predict(X_train[:m])
        y_val_predict = model.predict(X_val)
